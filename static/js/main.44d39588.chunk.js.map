{"version":3,"sources":["redux/actions.js","components/ContactList/ContactList.jsx","components/ContactForm/ContactForm.jsx","components/Filter/Filter.jsx","components/App/App.jsx","redux/store.js","index.js"],"names":["shortid","require","addContact","createAction","data","payload","id","generate","deleteContact","filterContact","ContactList","dispatch","useDispatch","contacts","useSelector","state","filter","items","normalizedFilter","toLowerCase","contact","name","includes","className","map","number","type","onClick","onDeleteContact","ContactForm","useState","setName","setNumber","handleInputChange","e","currentTarget","value","onSubmit","preventDefault","trim","alert","onChange","Filter","event","target","App","itemContactReducer","createReducer","action","search","find","el","filtered","filterContactReducer","contactReducer","combineReducers","contactsPersistConfig","key","storage","blacklist","rootReducer","persistReducer","store","configureStore","reducer","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","devTools","process","persistore","persistor","persistStore","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"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","file":"static/js/main.44d39588.chunk.js","sourcesContent":["import { createAction } from '@reduxjs/toolkit';\nconst shortid = require('shortid');\n\nexport const addContact = createAction('contacts/add', data => ({\n  payload: {\n    ...data,\n    id: shortid.generate(),\n  },\n}));\n\nexport const deleteContact = createAction('contacts/delete');\n\nexport const filterContact = createAction('contacts/changeFilter');\n","import { useSelector, useDispatch } from 'react-redux';\nimport { deleteContact } from '../../redux/actions';\nimport './ContactList.css';\nimport PropTypes from 'prop-types';\n\nconst ContactList = () => {\n  const dispatch = useDispatch();\n  const onDeleteContact = id => dispatch(deleteContact(id));\n\n  const getContactList = state => {\n    const { filter, items } = state.contacts;\n    const normalizedFilter = filter.toLowerCase();\n\n    return items.filter(contact =>\n      contact.name.toLowerCase().includes(normalizedFilter),\n    );\n  };\n  const contacts = useSelector(getContactList);\n\n  return (\n    <table className=\"List-table\">\n      <tbody>\n        {contacts.map(({ name, number, id }) => (\n          <tr key={id}>\n            <td>{name}</td>\n            <td>{number}</td>\n            <td>\n              <button type=\"button\" onClick={() => onDeleteContact(id)}>\n                del\n              </button>\n            </td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n};\nContactList.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n    }),\n  ),\n};\nexport default ContactList;\n","import { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { addContact } from '../../redux/actions';\nimport './ContactForm.css';\n\nfunction ContactForm() {\n  const dispatch = useDispatch();\n  const onSubmit = data => dispatch(addContact(data));\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const handleInputChange = e => {\n    const { name, value } = e.currentTarget;\n\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'number':\n        setNumber(value);\n        break;\n      default:\n        return;\n    }\n  };\n  const handleSubmit = e => {\n    e.preventDefault();\n    if (name.trim() === '' || number.trim() === '') {\n      alert('Fill all fields!');\n      return;\n    }\n    onSubmit({ name, number });\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <form className=\"Form\" onSubmit={handleSubmit}>\n      <label className=\"Form-label\">\n        Name\n        <input\n          className=\"Form-input\"\n          type=\"text\"\n          name=\"name\"\n          value={name}\n          onChange={handleInputChange}\n        />\n      </label>\n      <label className=\"Form-label\">\n        Number\n        <input\n          className=\"Form-input\"\n          type=\"text\"\n          name=\"number\"\n          value={number}\n          onChange={handleInputChange}\n        />\n      </label>\n      <button type=\"submit\">Add contact</button>\n    </form>\n  );\n}\n\nexport default ContactForm;\n","import { useDispatch } from 'react-redux';\nimport { filterContact } from '../../redux/actions';\n\nconst Filter = () => {\n  const dispatch = useDispatch();\n\n  const onFilter = event => dispatch(filterContact(event.target.value));\n\n  return (\n    <label>\n      <input type=\"text\" name=\"filter\" onChange={onFilter} />\n    </label>\n  );\n};\n\nexport default Filter;\n","import './App.css';\nimport ContactList from '../ContactList/ContactList';\nimport ContactForm from '../ContactForm/ContactForm';\nimport Filter from '../Filter/Filter';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1>Phonebook</h1>\n      <ContactForm />\n      <h2>Contacts</h2>\n      <p className=\"App-find\">Find contacts by name</p>\n      <Filter />\n      <ContactList />\n    </div>\n  );\n}\n\nexport default App;\n","import { combineReducers } from 'redux';\nimport {\n  configureStore,\n  createReducer,\n  getDefaultMiddleware,\n} from '@reduxjs/toolkit';\nimport { addContact, deleteContact, filterContact } from './actions';\nimport {\n  persistStore,\n  persistReducer,\n  FLUSH,\n  REHYDRATE,\n  PAUSE,\n  PERSIST,\n  PURGE,\n  REGISTER,\n} from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\n\n//*state*//\n// {\n//   contacts: {\n//     items: [],\n//     filter: ''\n//   }\n// }\n\nconst itemContactReducer = createReducer([], {\n  [addContact.type]: (state, action) => {\n    const search = state.find(\n      el => el.name.toLowerCase() === action.payload.name.toLowerCase(),\n    );\n    if (search) {\n      alert(`${search.name} is already in contacts.`);\n      return;\n    }\n    return [...state, action.payload];\n  },\n  [deleteContact.type]: (state, action) => {\n    const filtered = state.filter(el => el.id !== action.payload);\n    return [...filtered];\n  },\n});\n\nconst filterContactReducer = createReducer('', {\n  [filterContact.type]: (state, action) => action.payload,\n});\n\nconst contactReducer = combineReducers({\n  items: itemContactReducer,\n  filter: filterContactReducer,\n});\n\nconst contactsPersistConfig = {\n  key: 'contacts',\n  storage,\n  blacklist: ['filter'],\n};\n\nconst rootReducer = combineReducers({\n  contacts: persistReducer(contactsPersistConfig, contactReducer),\n});\n\nconst store = configureStore({\n  reducer: rootReducer,\n  middleware: getDefaultMiddleware({\n    serializableCheck: {\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n    },\n  }),\n  devTools: process.env.NODE_ENV !== 'production',\n});\n\nconst persistor = persistStore(store);\n\nconst persistore = { store, persistor };\n\nexport default persistore;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport { Provider } from 'react-redux';\nimport './index.css';\nimport App from './components/App/App';\n\nimport store from './redux/store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store.store}>\n      <PersistGate loading={null} persistor={store.persistor}>\n        <App />\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}