{"version":3,"sources":["redux/types.js","redux/actions.js","components/ContactList/ContactList.jsx","components/ContactForm/ContactForm.jsx","components/Filter/Filter.jsx","components/App/App.jsx","redux/store.js","index.js"],"names":["contactTypes","ADD","DELETE","CHANGE_FILTER","shortid","require","getContactList","allContacts","filter","normalizedFilter","toLowerCase","contact","name","includes","connect","state","contacts","items","dispatch","onDeleteContact","id","type","types","payload","className","map","number","onClick","onSubmit","data","generate","addContact","useState","setName","setNumber","handleInputChange","e","currentTarget","value","preventDefault","trim","alert","onChange","onFilter","event","target","App","contactReducer","combineReducers","action","filtered","el","rootReducer","store","createStore","composeWithDevTools","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.57f04afe.chunk.js","sourcesContent":["const contactTypes = {\n  ADD: 'contacts/add',\n  DELETE: 'contacts/delete',\n  CHANGE_FILTER: 'contacts/changeFilter',\n};\nexport default contactTypes;\n","import types from './types';\n\nconst shortid = require('shortid');\n\nexport const addContact = data => ({\n  type: types.ADD,\n  payload: {\n    ...data,\n    id: shortid.generate(),\n  },\n});\n\nexport const deleteContact = contactId => ({\n  type: types.DELETE,\n  payload: contactId,\n});\n\nexport const filterContact = value => ({\n  type: types.CHANGE_FILTER,\n  payload: value,\n});\n","import { connect } from 'react-redux';\nimport { deleteContact } from '../../redux/actions';\nimport './ContactList.css';\nimport PropTypes from 'prop-types';\nconst ContactList = ({ contacts, onDeleteContact }) => {\n  return (\n    <table className=\"List-table\">\n      <tbody>\n        {contacts.map(({ name, number, id }) => (\n          <tr key={id}>\n            <td>{name}</td>\n            <td>{number}</td>\n            <td>\n              <button type=\"button\" onClick={() => onDeleteContact(id)}>\n                del\n              </button>\n            </td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n};\nContactList.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n    }),\n  ),\n  onDeleteContact: PropTypes.func.isRequired,\n};\n\nconst getContactList = (allContacts, filter) => {\n  const normalizedFilter = filter.toLowerCase();\n\n  return allContacts.filter(contact =>\n    contact.name.toLowerCase().includes(normalizedFilter),\n  );\n};\n\nconst mapStateToProps = state => {\n  const { filter, items } = state.contacts;\n  return {\n    contacts: getContactList(items, filter),\n  };\n};\nconst mapDispatchToProps = dispatch => ({\n  onDeleteContact: id => dispatch(deleteContact(id)),\n});\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\n","import { useState } from 'react';\nimport { connect } from 'react-redux';\nimport { addContact } from '../../redux/actions';\nimport './ContactForm.css';\nimport PropTypes from 'prop-types';\n\nfunction ContactForm({ onSubmit }) {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const handleInputChange = e => {\n    const { name, value } = e.currentTarget;\n\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'number':\n        setNumber(value);\n        break;\n      default:\n        return;\n    }\n  };\n  const handleSubmit = e => {\n    e.preventDefault();\n    if (name.trim() === '' || number.trim() === '') {\n      alert('Fill all fields!');\n      return;\n    }\n    onSubmit({ name, number });\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <form className=\"Form\" onSubmit={handleSubmit}>\n      <label className=\"Form-label\">\n        Name\n        <input\n          className=\"Form-input\"\n          type=\"text\"\n          name=\"name\"\n          value={name}\n          onChange={handleInputChange}\n        />\n      </label>\n      <label className=\"Form-label\">\n        Number\n        <input\n          className=\"Form-input\"\n          type=\"text\"\n          name=\"number\"\n          value={number}\n          onChange={handleInputChange}\n        />\n      </label>\n      <button type=\"submit\">Add contact</button>\n    </form>\n  );\n}\n\nContactForm.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n};\n\nconst mapDispatchToProps = dispatch => ({\n  onSubmit: data => dispatch(addContact(data)),\n});\nexport default connect(null, mapDispatchToProps)(ContactForm);\n","import PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { filterContact } from '../../redux/actions';\nconst Filter = ({ onFilter }) => {\n  return (\n    <label>\n      <input type=\"text\" name=\"filter\" onChange={onFilter} />\n    </label>\n  );\n};\nFilter.propTypes = {\n  onFilter: PropTypes.func.isRequired,\n};\n\nconst mapDispatchToProps = dispatch => ({\n  onFilter: event => dispatch(filterContact(event.target.value)),\n});\nexport default connect(null, mapDispatchToProps)(Filter);\n","// import data from '../../data.json';\n// import { useState, useEffect } from 'react';\nimport './App.css';\nimport ContactList from '../ContactList/ContactList';\nimport ContactForm from '../ContactForm/ContactForm';\nimport Filter from '../Filter/Filter';\n// const shortid = require('shortid');\n\nfunction App() {\n  // const [contacts, setContacts] = useState([]);\n  // const [filter, setFilter] = useState('');\n\n  // const handleFilter = e => {\n  //   const { value } = e.currentTarget;\n  //   setFilter(value);\n  // };\n  // useEffect(() => {\n  //   const localContacts = JSON.parse(localStorage.getItem('contacts'));\n  //   if (localContacts) {\n  //     setContacts(localContacts);\n  //   }\n  // }, []);\n  // useEffect(() => {\n  //   localStorage.setItem('contacts', JSON.stringify(contacts));\n  // }, [contacts]);\n\n  // const handleSubmit = data => {\n  //   const search = contacts.find(\n  //     el => el.name.toLowerCase() === data.name.toLowerCase(),\n  //   );\n  //   if (search) {\n  //     alert(`${search.name} is already in contacts.`);\n  //     return;\n  //   }\n\n  //   const newContact = {\n  //     ...data,\n  //     id: shortid.generate(),\n  //   };\n  //   setContacts(prevState => [...prevState, newContact]);\n  // };\n\n  // const getContactList = () => {\n  //   const normalizedFilter = filter.toLowerCase();\n\n  //   return contacts.filter(contact =>\n  //     contact.name.toLowerCase().includes(normalizedFilter),\n  //   );\n  // };\n\n  // const onDeleteContact = id => {\n  //   setContacts(prevState => {\n  //     const filtered = prevState.filter(el => el.id !== id);\n  //     return [...filtered];\n  //   });\n  // };\n  return (\n    <div className=\"App\">\n      <h1>Phonebook</h1>\n      {/* <ContactForm onSubmit={handleSubmit} /> */}\n      <ContactForm />\n      <h2>Contacts</h2>\n      <p className=\"App-find\">Find contacts by name</p>\n      {/* <Filter value={filter} onFilter={handleFilter} /> */}\n      <Filter />\n      {/* <ContactList\n        contacts={getContactList()}\n        onDeleteContact={onDeleteContact}\n      /> */}\n      <ContactList />\n    </div>\n  );\n}\n\nexport default App;\n","import { createStore, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport types from './types';\n\n// {\n//   contacts: {\n//     items: [],\n//     filter: ''\n//   }\n// }\n\nconst itemContactReducer = (state = [], action) => {\n  switch (action.type) {\n    case types.ADD:\n      return [...state, action.payload];\n    case types.DELETE:\n      const filtered = state.filter(el => el.id !== action.payload);\n      return [...filtered];\n    default:\n      return state;\n  }\n};\n\nconst filterContactReducer = (state = '', action) => {\n  switch (action.type) {\n    case types.CHANGE_FILTER:\n      return action.payload;\n\n    default:\n      return state;\n  }\n};\n\nconst contactReducer = combineReducers({\n  items: itemContactReducer,\n  filter: filterContactReducer,\n});\n\nconst rootReducer = combineReducers({\n  contacts: contactReducer,\n});\n\nconst store = createStore(rootReducer, composeWithDevTools());\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport './index.css';\nimport App from './components/App/App';\n\nimport store from './redux/store';\n// import { actionAdd } from './redux/actions';\n\n// console.log(store);\n// console.log(store.dispatch(actionAdd('my super payload')));\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}